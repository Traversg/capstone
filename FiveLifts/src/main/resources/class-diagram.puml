@startuml
'https://plantuml.com/class-diagram

class User {
- email : String
- bodyWeight : double
- deadlift : int
- squat : int
- benchPress : int
- overheadPress : int
- barbellRow : int
+ getEmail() : String
+ setEmail() : void
+ getBodyWeight() : double
+ setBodyWeight() : void
+ getDeadlift() : int
+ setDeadlift() : void
+ getSquat() : int
+ setSquat() : void
+ getBenchPress() : int
+ setBenchPress() : void
+ getOverheadPress() : int
+ setOverheadPress() : void
+ getBarbellRow() : int
+ setBarbellRow() : void
}

class Workout {
- workoutType : enum
- email : String
- workoutDate : LocalDateTime
- totalWorkoutTime : Duration
- squatReps : int[]
- benchPressReps : int[]
- deadliftReps : int[]
- overheadPressReps : int[]
- barbellRowReps : int[]
- squatWeight : int
- benchPressWeight : int
- barbellRowWeight : int
- overheadPressWeight : int
- deadliftWeight : int
+ getWorkoutType() : String
+ setWorkoutType() : void
+ getEmail() : String
+ setUserId() : void
+ getWorkoutDate() : LocalDateTime
+ setWorkoutDate() : void
+ getTotalWorkoutTime() : Duration
+ setTotalWorkoutTime() : void
+ getSquatReps() : int[]
+ setSquatReps() : void
+ getBenchPressReps() : int[]
+ setBenchPressReps() : void
+ getDeadliftReps() : int[]
+ setDeadliftReps() : void
+ getOverheadPressReps() : int[]
+ setOverheadPressReps() : void
+ getBarbellRowReps() : int[]
+ setBarbellRowReps() : void
+ getSquatWeight() : int
+ setSquatWeight() : void
+ getBenchPressWeight() : int
+ setBenchPressWeight() : void
+ getBarbellRowWeight() : int
+ setBarbellRowWeight() : void
+ getOverheadPressWeight() : int
+ setOverheadPressWeight() : void
+ getDeadliftWeight() : int
+ setDeadliftWeight() : void
}

enum WorkoutType {
WORKOUT_A
WORKOUT_B
}

class UserDao {
- final dynamoDBMapper : DynamoDBMapper
+ getUser : User
+ saveUser : void
+ deleterUser : void
}

class WorkoutDao {
- final dynamoDBMapper : DynamoDBMapper
+ getMostRecentWorkout(String email) : Optional<Workout>
+ saveWorkout : void
+ getWorkoutHistory(String email) : List<Workout>
+ deleteWorkout : void
}

class AddWorkoutActivity {
- final workoutDao : WorkoutDao
+ handleRequest(AddWorkoutRequest request) : AddWorkoutResult
- canIncrement(int reps) : boolean
- canIncrementDeadlift(int reps) : boolean
- getReps(List<Integer> reps) : int
- repsMoreThanFive(List<Integer> reps) : boolean
- repsLessThanZero(List<Intger> reps) : boolean
}

class CreateProfileActivity {
- final userDao : UserDao
+ handleRequest(CreateProfileRequest request) : CreateProfileResult
- roundDown(int lift)
}

class DeleteUserProfileAndWorkoutHistoryActivity {
 - final workoutDao : WorkoutDao
 - final userDao : UserDao
 + handleRequest(DeleteUserProfileAndWorkoutHistoryRequest request) : DeleteUserProfileAndWorkoutHistoryResult
}

class GetIsCurrentUserActivity {
- final userDao : UserDao
+ handleRequest(GetIsCurrentUserRequest request) : GetIsCurrentUserResult
}

class GetMostRecentWorkoutActivity {
- final workoutDao : WorkoutDao
+ handleRequest(GetMostRecentWorkoutRequest request) : GetMostRecentWorkoutResult
}

class GetWorkoutHistoryActivity {
- final workoutDao : WorkoutDao
+ handleRequest(WorkoutHistoryRequest request) : WorkoutHistoryResult
}

class GetUpcomingWorkoutsActivity {
- final workoutDao : workoutDao
- final userDao : UserDao
+ handleRequest(GetUpcomingWorkouts request) : GetUpcomingWorkoutsResult
- dayToStartWorkout(LocalDate mostRecentWorkoutDate) : LocalDateTime
- createWorkoutA(int squatWeight, int benchPressWeight, int barbellRowWeight,
                LocalDate dayToStart, boolean isCurrentUser, boolean isFirstOfType, boolean firstSquat) : Workout
- createWorkoutB(int squatWeight, int benchPressWeight, int barbellRowWeight,
                LocalDate dayToStart, boolean isCurrentUser, boolean isFirstOfType, boolean firstSquat) : Workout
- createABAWorkoutSchedule(int mostRecentSquatWeight, int mostRecentBenchPressWeight,
                int mostRecentBarbellRowWeight, int mostRecentOverheadPressWeight,
                int mostRecentDeadliftWeight, LocalDate dayToStart, boolean isCurrentUser) : List<WorkoutModel>
- createBABWorkoutSchedule(int mostRecentSquatWeight, int mostRecentBenchPressWeight,
              int mostRecentBarbellRowWeight, int mostRecentOverheadPressWeight,
              int mostRecentDeadliftWeight, LocalDate dayToStart) : List<WorkoutModel>
- createUpcomingWorkouts(Optional<Workout> mostRecentWorkout, GetUpcomingWorkoutRequest request) : List<WorkoutModel>
}



User --|> UserDao
Workout --|> WorkoutDao
AddWorkoutActivity <|-- WorkoutDao
GetIsCurrentUserActivity <|-- UserDao
CreateProfileActivity <|-- UserDao
GetWorkoutHistoryActivity <|-- WorkoutDao
GetUpcomingWorkoutActivity <|-- UserDao
GetUpcomingWorkoutActivity <|-- WorkoutDao
DeleteUserProfileAndWorkoutHistoryActivity <|-- WorkoutDao
DeleteUserProfileAndWorkoutHistoryActivity <|-- UserDao
GetMostRecentWorkoutActivity <|-- WorkoutDao
WorkoutType --|> Workout
@enduml
